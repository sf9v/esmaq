// Code generated by esmaq, DO NOT EDIT.
package cart

import (
	"context"
	"errors"
	esmaq "github.com/stevenferrer/esmaq"
)

type State esmaq.StateType

const (
	StateShopping   State = "shopping"
	StateFinalizing State = "finalizing"
	StatePaid       State = "paid"
	StateSubmitted  State = "submitted"
)

type Event esmaq.EventType

const (
	EventCheckout Event = "checkout"
	EventPay      Event = "pay"
	EventSubmit   Event = "submit"
)

type ctxKey int

const (
	fromKey ctxKey = iota
	toKey
)

type Cart struct {
	core      *esmaq.Core
	callbacks *Callbacks
}

type Callbacks struct {
	Checkout func(ctx context.Context, cartID int64) (err error)
	Pay      func(ctx context.Context, cartID int64, paymentId int64) (err error)
	Submit   func(ctx context.Context, cartID int64) (orderId int64, err error)
}

type Actions struct {
	Shopping   esmaq.Actions
	Finalizing esmaq.Actions
	Paid       esmaq.Actions
	Submitted  esmaq.Actions
}

func (sm *Cart) Checkout(ctx context.Context, cartID int64) (err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return errors.New("\"from\" state not set in context")
	}

	fromState, err := sm.core.GetState(esmaq.StateType(from))
	if err != nil {
		return err
	}

	toState, err := sm.core.Transition(esmaq.EventType(EventCheckout), esmaq.StateType(from))
	if err != nil {
		return err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StateFinalizing)

	if fromState.Actions.OnExit != nil {
		err = fromState.Actions.OnExit(ctx)
		if err != nil {
			return err
		}
	}

	if sm.callbacks != nil {
		err = sm.callbacks.Checkout(ctx, cartID)
		if err != nil {
			return err
		}

	}

	if toState.Actions.OnEnter != nil {
		err = toState.Actions.OnEnter(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (sm *Cart) Pay(ctx context.Context, cartID int64, paymentId int64) (err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return errors.New("\"from\" state not set in context")
	}

	fromState, err := sm.core.GetState(esmaq.StateType(from))
	if err != nil {
		return err
	}

	toState, err := sm.core.Transition(esmaq.EventType(EventPay), esmaq.StateType(from))
	if err != nil {
		return err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StatePaid)

	if fromState.Actions.OnExit != nil {
		err = fromState.Actions.OnExit(ctx)
		if err != nil {
			return err
		}
	}

	if sm.callbacks != nil {
		err = sm.callbacks.Pay(ctx, cartID, paymentId)
		if err != nil {
			return err
		}

	}

	if toState.Actions.OnEnter != nil {
		err = toState.Actions.OnEnter(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (sm *Cart) Submit(ctx context.Context, cartID int64) (orderId int64, err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return 0, errors.New("\"from\" state not set in context")
	}

	fromState, err := sm.core.GetState(esmaq.StateType(from))
	if err != nil {
		return 0, err
	}

	toState, err := sm.core.Transition(esmaq.EventType(EventSubmit), esmaq.StateType(from))
	if err != nil {
		return 0, err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StateSubmitted)

	if fromState.Actions.OnExit != nil {
		err = fromState.Actions.OnExit(ctx)
		if err != nil {
			return 0, err
		}
	}

	if sm.callbacks != nil {
		orderId, err = sm.callbacks.Submit(ctx, cartID)
		if err != nil {
			return 0, err
		}

	}

	if toState.Actions.OnEnter != nil {
		err = toState.Actions.OnEnter(ctx)
		if err != nil {
			return 0, err
		}
	}

	return orderId, nil
}

func CtxWtFrom(ctx context.Context, from State) context.Context {
	return context.WithValue(ctx, fromKey, from)
}

func ctxWtTo(ctx context.Context, to State) context.Context {
	return context.WithValue(ctx, toKey, to)
}

func fromCtx(ctx context.Context) (State, bool) {
	from, ok := ctx.Value(fromKey).(State)
	return from, ok
}

func ToCtx(ctx context.Context) (State, bool) {
	to, ok := ctx.Value(toKey).(State)
	return to, ok
}

func NewCart(actions *Actions, callbacks *Callbacks) *Cart {
	stateConfigs := []esmaq.StateConfig{
		{
			From:    esmaq.StateType(StateShopping),
			Actions: actions.Shopping,
			Transitions: []esmaq.TransitionConfig{
				{
					Event: esmaq.EventType(EventCheckout),
					To:    esmaq.StateType(StateFinalizing),
				},
			},
		},
		{
			From:    esmaq.StateType(StateFinalizing),
			Actions: actions.Finalizing,
			Transitions: []esmaq.TransitionConfig{
				{
					Event: esmaq.EventType(EventPay),
					To:    esmaq.StateType(StatePaid),
				},
			},
		},
		{
			From:    esmaq.StateType(StatePaid),
			Actions: actions.Paid,
			Transitions: []esmaq.TransitionConfig{
				{
					Event: esmaq.EventType(EventSubmit),
					To:    esmaq.StateType(StateSubmitted),
				},
			},
		},
		{
			From:        esmaq.StateType(StateSubmitted),
			Actions:     actions.Submitted,
			Transitions: []esmaq.TransitionConfig{},
		},
	}

	cart := &Cart{
		core:      esmaq.NewCore(stateConfigs),
		callbacks: callbacks,
	}

	return cart
}

// Code generated by esmaq, DO NOT EDIT.
package myswitch

import (
	"context"
	"errors"
	esmaq "github.com/stevenferrer/esmaq"
)

type State esmaq.StateType

const (
	StateOff State = "off"
	StateOn  State = "on"
)

type Event esmaq.EventType

const (
	EventSwitchOn  Event = "switchOn"
	EventSwitchOff Event = "switchOff"
)

type ctxKey int

const (
	fromKey ctxKey = iota
	toKey
)

type MySwitch struct {
	core      *esmaq.Core
	callbacks *Callbacks
}

type Callbacks struct {
	SwitchOn  func(ctx context.Context, a int) (b string, err error)
	SwitchOff func(ctx context.Context) (err error)
}

type Actions struct {
	Off esmaq.Actions
	On  esmaq.Actions
}

func (sm *MySwitch) SwitchOn(ctx context.Context, a int) (b string, err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return "", errors.New("\"from\" state not set in context")
	}

	fromState, err := sm.core.GetState(esmaq.StateType(from))
	if err != nil {
		return "", err
	}

	toState, err := sm.core.Transition(esmaq.EventType(EventSwitchOn), esmaq.StateType(from))
	if err != nil {
		return "", err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StateOn)

	if fromState.Actions.OnExit != nil {
		err = fromState.Actions.OnExit(ctx)
		if err != nil {
			return "", err
		}
	}

	if sm.callbacks != nil {
		b, err = sm.callbacks.SwitchOn(ctx, a)
		if err != nil {
			return "", err
		}

	}

	if toState.Actions.OnEnter != nil {
		err = toState.Actions.OnEnter(ctx)
		if err != nil {
			return "", err
		}
	}

	return b, nil
}

func (sm *MySwitch) SwitchOff(ctx context.Context) (err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return errors.New("\"from\" state not set in context")
	}

	fromState, err := sm.core.GetState(esmaq.StateType(from))
	if err != nil {
		return err
	}

	toState, err := sm.core.Transition(esmaq.EventType(EventSwitchOff), esmaq.StateType(from))
	if err != nil {
		return err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StateOff)

	if fromState.Actions.OnExit != nil {
		err = fromState.Actions.OnExit(ctx)
		if err != nil {
			return err
		}
	}

	if sm.callbacks != nil {
		err = sm.callbacks.SwitchOff(ctx)
		if err != nil {
			return err
		}

	}

	if toState.Actions.OnEnter != nil {
		err = toState.Actions.OnEnter(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func CtxWtFrom(ctx context.Context, from State) context.Context {
	return context.WithValue(ctx, fromKey, from)
}

func ctxWtTo(ctx context.Context, to State) context.Context {
	return context.WithValue(ctx, toKey, to)
}

func fromCtx(ctx context.Context) (State, bool) {
	from, ok := ctx.Value(fromKey).(State)
	return from, ok
}

func ToCtx(ctx context.Context) (State, bool) {
	to, ok := ctx.Value(toKey).(State)
	return to, ok
}

func NewMySwitch(actions *Actions, callbacks *Callbacks) *MySwitch {
	stateConfigs := []esmaq.StateConfig{
		{
			From:    esmaq.StateType(StateOff),
			Actions: actions.Off,
			Transitions: []esmaq.TransitionConfig{
				{
					Event: esmaq.EventType(EventSwitchOn),
					To:    esmaq.StateType(StateOn),
				},
			},
		},
		{
			From:    esmaq.StateType(StateOn),
			Actions: actions.On,
			Transitions: []esmaq.TransitionConfig{
				{
					Event: esmaq.EventType(EventSwitchOff),
					To:    esmaq.StateType(StateOff),
				},
			},
		},
	}

	mySwitch := &MySwitch{
		core:      esmaq.NewCore(stateConfigs),
		callbacks: callbacks,
	}

	return mySwitch
}

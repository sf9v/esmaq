// Code generated by esmaq, DO NOT EDIT.
package myswitch

import (
	"context"
	"errors"
	esmaq "github.com/stevenferrer/esmaq"
)

type State esmaq.State

const (
	StateOff State = "off"
	StateOn  State = "on"
)

type Event esmaq.Event

const (
	EventSwitchOn  Event = "switchOn"
	EventSwitchOff Event = "switchOff"
)

type MySwitch struct {
	core          *esmaq.Core
	eventHandlers *EventHandlers
}

type EventHandlers struct {
	SwitchOn  *SwitchOnEventHandlers
	SwitchOff *SwitchOffEventHandlers
}

type SwitchOnEventHandlers struct {
	OnTransition func(ctx context.Context, a int) (b float32, err error)
	OnEnter      func(context.Context) error
}

type SwitchOffEventHandlers struct {
	OnTransition func(ctx context.Context) (err error)
	OnEnter      func(context.Context) error
}

func (sm *MySwitch) SwitchOn(ctx context.Context, a int) (b float32, err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return 0, errors.New("\"from\" state not set in context")
	}

	// see transition is allowed
	err = sm.core.CanTransition(esmaq.Event(EventSwitchOn), esmaq.State(from))
	if err != nil {
		return 0, err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StateOn)

	b, err = sm.eventHandlers.SwitchOn.OnTransition(ctx, a)
	if err != nil {
		return 0, err
	}

	err = sm.eventHandlers.SwitchOn.OnEnter(ctx)
	if err != nil {
		return 0, err
	}

	return b, nil
}

func (sm *MySwitch) SwitchOff(ctx context.Context) (err error) {
	from, ok := fromCtx(ctx)
	if !ok {
		return errors.New("\"from\" state not set in context")
	}

	// see transition is allowed
	err = sm.core.CanTransition(esmaq.Event(EventSwitchOff), esmaq.State(from))
	if err != nil {
		return err
	}

	// inject "to" in context
	ctx = ctxWtTo(ctx, StateOff)

	err = sm.eventHandlers.SwitchOff.OnTransition(ctx)
	if err != nil {
		return err
	}

	err = sm.eventHandlers.SwitchOff.OnEnter(ctx)
	if err != nil {
		return err
	}

	return nil
}

type ctxKey int

const (
	fromKey ctxKey = iota
	toKey
)

func CtxWtFrom(ctx context.Context, from State) context.Context {
	return context.WithValue(ctx, fromKey, from)
}

func ctxWtTo(ctx context.Context, to State) context.Context {
	return context.WithValue(ctx, toKey, to)
}

func fromCtx(ctx context.Context) (State, bool) {
	from, ok := ctx.Value(fromKey).(State)
	return from, ok
}

func ToCtx(ctx context.Context) (State, bool) {
	to, ok := ctx.Value(toKey).(State)
	return to, ok
}

func NewMySwitch(eventHandlers *EventHandlers) *MySwitch {
	stateConfigs := []esmaq.StateConfig{
		{
			From: esmaq.State(StateOff),
			Transitions: []esmaq.Transitions{
				{
					Event: esmaq.Event(EventSwitchOn),
					To:    esmaq.State(StateOn),
				},
			},
		},
		{
			From: esmaq.State(StateOn),
			Transitions: []esmaq.Transitions{
				{
					Event: esmaq.Event(EventSwitchOff),
					To:    esmaq.State(StateOff),
				},
			},
		},
	}

	mySwitch := &MySwitch{
		core:          esmaq.NewCore(stateConfigs),
		eventHandlers: eventHandlers,
	}

	return mySwitch
}
